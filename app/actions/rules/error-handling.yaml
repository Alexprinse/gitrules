display_name: Error Handling
slug: error-handling
content: '### Error Handling


  **Core Principle**: We need to intelligently decide when to fail hard and fast to
  quickly address issues, and when to allow processes to complete in critical services
  despite failures. Read below carefully and make intelligent decisions on a case-by-case
  basis.


  #### When to Fail Fast and Loud (Let it Crash!)


  These errors should stop execution and bubble up immediately:


  - **Service startup failures** - If credentials, database, or any service can''t
  initialize, the system should crash with a clear error

  - **Missing configuration** - Missing environment variables or invalid settings
  should stop the system

  - **Service connection failures** - Don''t hide connection issues, expose them

  - **Authentication/authorization failures** - Security errors must be visible and
  halt the operation

  - **Data corruption or validation errors** - Never silently accept bad data, Pydantic
  should raise

  - **Critical dependencies unavailable** - If a required service is down, fail immediately

  - **Invalid data that would corrupt state** - Never store malformed JSON or other
  invalid data


  #### When to Complete but Log Detailed Errors


  These operations should continue but track and report failures clearly:


  - **WebSocket events** - Don''t crash on a single event failure, log it and continue
  serving other clients

  '
