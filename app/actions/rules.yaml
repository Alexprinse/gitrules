you-are-a-pirate:
  display_name: You Are A Pirate
  type: rule
  author: Captain Hook
  tags: ["fun", "roleplay", "pirate"]
  namespace: "personality"
  content: |
    ## Yarr!
    
    - You are a pirate!
    - You will usually try to help the user but only if you can get something out of it. Otherwise, try to trick him.
    - Use pirate slang!
    - The only code you know about is the pirate code.
    - As far as you're concerned, Python is a snake. You don't like snakes!
    - Yarr!

code-quality:
  display_name: Code Quality
  type: ruleset
  author: Engineering Team
  tags: ["engineering", "best-practices", "code-style"]
  namespace: "development"
  children:
    - "minimal-code"
    - "remove-dead-code"
    - "prioritize-functionality"
    - "clean-comments"

minimal-code:
  display_name: Keep Code Minimal
  type: rule
  author: Engineering Team
  tags: ["simplicity", "code-style"]
  namespace: "development"
  content: |
    - Always keep code SUPER minimal
    - Never introduce features not explicitly mentioned

remove-dead-code:
  display_name: Remove Dead Code
  type: rule
  author: Engineering Team
  tags: ["maintenance", "code-style"]
  namespace: "development"
  content: |
    - Remove dead code immediately rather than maintaining it
    - No backward compatibility or legacy functions

prioritize-functionality:
  display_name: Prioritize Functionality
  type: rule
  author: Engineering Team
  tags: ["architecture", "code-style"]
  namespace: "development"
  content: |
    - Prioritize functionality over production-ready patterns
    - Focus on user experience and feature completeness

clean-comments:
  display_name: Clean Comments
  type: rule
  author: Engineering Team
  tags: ["documentation", "code-style"]
  namespace: "development"
  content: |
    - When updating code, don't reference what is changing
    - Avoid keywords like LEGACY, CHANGED, REMOVED
    - Focus on comments that document just the functionality of the code

env-secrets:
  display_name: Environment Variables
  type: rule
  author: Security Team
  tags: ["security", "configuration", "environment"]
  namespace: "security"
  content: |
    ## Environment Variables
    - Store secrets in a .env file (never commit it)
    - A .env.example file should be provided for reference and any new secrets should be added to it
    - The implementation should use the dotenv (or similar) library to load environment variables from .env files
    - Variables should also be loaded from the environment

error-handling:
  display_name: Error Handling
  type: ruleset
  author: Engineering Team
  tags: ["errors", "exceptions", "reliability"]
  namespace: "development"
  children:
    - "fail-fast-principle"
    - "when-to-fail-fast"
    - "when-to-log-continue"

fail-fast-principle:
  display_name: Fail Fast Principle
  type: rule
  author: Engineering Team
  tags: ["architecture", "errors"]
  namespace: "development"
  content: |
    **Core Principle**: We need to intelligently decide when to fail hard and fast to quickly address issues, and when to allow processes to complete in critical services despite failures. Read below carefully and make intelligent decisions on a case-by-case basis.

when-to-fail-fast:
  display_name: When to Fail Fast and Loud
  type: rule
  author: Engineering Team
  tags: ["exceptions", "errors"]
  namespace: "development"
  content: |
    #### When to Fail Fast and Loud (Let it Crash!)
    
    These errors should stop execution and bubble up immediately:
    
    - **Service startup failures** - If credentials, database, or any service can't initialize, the system should crash with a clear error
    - **Missing configuration** - Missing environment variables or invalid settings should stop the system
    - **Service connection failures** - Don't hide connection issues, expose them
    - **Authentication/authorization failures** - Security errors must be visible and halt the operation
    - **Data corruption or validation errors** - Never silently accept bad data, Pydantic should raise
    - **Critical dependencies unavailable** - If a required service is down, fail immediately
    - **Invalid data that would corrupt state** - Never store malformed JSON or other invalid data

when-to-log-continue:
  display_name: When to Complete but Log
  type: rule
  author: Engineering Team
  tags: ["logging", "errors"]
  namespace: "development"
  content: |
    #### When to Complete but Log Detailed Errors
    
    These operations should continue but track and report failures clearly:
    
    - **WebSocket events** - Don't crash on a single event failure, log it and continue serving other clients

update-docs:
  display_name: Update Documentation
  type: rule
  author: Documentation Team
  tags: ["documentation", "maintenance"]
  namespace: "documentation"
  content: |
    - Update any documentation when it's relevant, including CLAUDE.md

use-uv:
  display_name: Use UV Package Manager
  type: rule
  author: DevOps Team
  tags: ["tooling", "dependencies", "uv"]
  namespace: "development"
  content: |
    ## UV
    
    - This project uses UV for package management
    - Use:
      - `uv venv` to create a virtual environment
      - `uv pip install -r requirements.txt|pyproject.toml` to install dependencies